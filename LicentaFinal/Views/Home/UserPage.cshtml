@model IEnumerable<LicentaFinal.Models.Instrument>;
@{
    ViewData["Title"] = "User Page";
}

<!DOCTYPE html>
<html>
<head>

</head>
<body>
    <div>
        <input id="myInput" name="myInstrument" type="text" placeholder="Search.." class="search-box" onkeyup="searchFunction(this.value)">
    </div>

    <div class="cart-button-div"> <a asp-area="" asp-controller="CartPage" asp-action="CartPage" class="cart-button">Cart</a> </div>
    
    <div class="admin-items-list">

        @foreach (var instrument in Model)
        {
            if (instrument.Quantity != 0)
            {
            <div id="@instrument.Name" style="display: block" class="searchClass">
                <div class="admin-item-details" >
                    
                    <img class="image" src="@instrument.ImageUrl" style="margin-bottom: 10px" />
                    
                    <div>
                        <label style="text-wrap:normal; font-weight: 700; font-size: 120%;">@instrument.Name</label>

                    </div>

                    <div style="margin-bottom: 5%">
                        <label>$@instrument.Price</label>
                    </div>

                    <input type="submit" id="@instrument.Id" value="Add to Cart" onclick="Order(this)" class="item-button" style="margin-bottom:20%;" />

                </div>
            </div>

            }
        }

    </div>

    <button onclick="topFunction()" id="up-botton" title="Go to top">Top</button>




    <script>

        


        var item = document.getElementsByClassName('searchClass');

        var countries = [];
        for (var i = 0; i < item.length; i++) {
            countries.push(item[i].id);
        }



        window.onscroll = function () { scrollFunction() };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("up-botton").style.display = "block";
            } else {
                document.getElementById("up-botton").style.display = "none";
            }
        }

        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }


        function searchFunction(searchText) {
            var itemsList = document.getElementsByClassName('searchClass');

            for (var i = 0; i < itemsList.length; i++) {
                if (!itemsList[i].id.toLowerCase().includes(searchText.toLowerCase())) {
                    itemsList[i].style.display = "none";
                } else {
                    itemsList[i].style.display = "block";
                }
            }
            console.log(searchText);
        }

        function Order(x) {
            $.post("/UserPage/AddToCart?id=" + $(x)[0].id,
                function (data, status) {
                if (status == "succes")
                        console.log("done");
                    location.reload();
                }
            );
        }

        function autocomplete(inp, arr) {
            /*the autocomplete function takes two arguments,
            the text field element and an array of possible autocompleted values:*/
            var currentFocus;
            /*execute a function when someone writes in the text field:*/
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);
                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        /*create a DIV element for each matching element:*/
                        b = document.createElement("DIV");
                        /*make the matching letters bold:*/
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        /*insert a input field that will hold the current array item's value:*/
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        /*execute a function when someone clicks on the item value (DIV element):*/
                        b.addEventListener("click", function (e) {
                            /*insert the value for the autocomplete text field:*/
                            inp.value = this.getElementsByTagName("input")[0].value;
                            /*close the list of autocompleted values,
                            (or any other open lists of autocompleted values:*/
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                        /*and simulate a click on the "active" item:*/
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }

        autocomplete(document.getElementById("myInput"), countries);



        var cartItems = [];

        function addToCart(id, name, price, quantity, type, userId) {

            var str = String(name.id);
            var instrument = [id, str, price, quantity];
            var user = userId;
            console.log(instrument);

            $.post("@Url.Action("AddToCart", "UserPage")", id, str, price, quantity, userId)
                    .done(function () {
                        console.log('post done');
                        location.reload();
                });

        }


    </script>


</body>
</html>
